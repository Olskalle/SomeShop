// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SomeShop;

#nullable disable

namespace SomeShop.Migrations
{
    [DbContext(typeof(ShopContext))]
    partial class ShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SomeShop.Models.CartItem", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("SessionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems", t =>
                        {
                            t.HasCheckConstraint("Quantity", "Quantity >= 1");
                        });

                    b.HasData(
                        new
                        {
                            SessionId = 2,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            SessionId = 2,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            SessionId = 1,
                            ProductId = 1,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "For Men"
                        },
                        new
                        {
                            Id = 2,
                            Name = "For Women"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hiking"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Yoga"
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Clients", t =>
                        {
                            t.HasCheckConstraint("PhoneNumber", "PhoneNumber LIKE '8%'");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ivan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Anatoliy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bartek"
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Employees", t =>
                        {
                            t.HasCheckConstraint("PhoneNumber", "PhoneNumber LIKE '8%'");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gus",
                            PhoneNumber = "89001001090",
                            ShopId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Walter",
                            PhoneNumber = "89053332222",
                            ShopId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "Valentina",
                            PhoneNumber = "89999009090",
                            ShopId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gennadiy",
                            PhoneNumber = "81234567890",
                            ShopId = 3
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "China-Super"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nike"
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShopId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            CreationDate = new DateTime(2023, 10, 31, 7, 37, 18, 652, DateTimeKind.Utc).AddTicks(3303),
                            EmployeeId = 1,
                            ShopId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 3,
                            CreationDate = new DateTime(2023, 10, 31, 7, 37, 18, 652, DateTimeKind.Utc).AddTicks(3308),
                            EmployeeId = 4,
                            ShopId = 3,
                            StatusId = 4
                        });
                });

            modelBuilder.Entity("SomeShop.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", t =>
                        {
                            t.HasCheckConstraint("Quantity", "Quantity >= 1");
                        });

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("SomeShop.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In process"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Delivering"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ready"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Payment", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            OrderId = 2,
                            ProviderId = 1,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("SomeShop.Models.PaymentProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sber"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tinkoff"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UralFD"
                        },
                        new
                        {
                            Id = 4,
                            Name = "QIWI"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PayPal"
                        });
                });

            modelBuilder.Entity("SomeShop.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManufacturerId = 1,
                            Name = "Red boots",
                            Rating = 100m
                        },
                        new
                        {
                            Id = 2,
                            ManufacturerId = 2,
                            Name = "Super sticky stick",
                            Rating = 33m
                        });
                });

            modelBuilder.Entity("SomeShop.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("SomeShop.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shops", t =>
                        {
                            t.HasCheckConstraint("PhoneNumber", "PhoneNumber LIKE '8%'");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Perm, Sibirskaya st.",
                            PhoneNumber = "89998889955"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Moscow, GUM",
                            PhoneNumber = "89665577889"
                        },
                        new
                        {
                            Id = 3,
                            Address = "USA, Kansas, Hays, Oak st.",
                            PhoneNumber = "89997775566"
                        });
                });

            modelBuilder.Entity("SomeShop.Models.ShopStorage", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ShopId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShopStorages", t =>
                        {
                            t.HasCheckConstraint("Quantity", "Quantity >= 0");
                        });

                    b.HasData(
                        new
                        {
                            ShopId = 1,
                            ProductId = 1,
                            Quantity = 100
                        },
                        new
                        {
                            ShopId = 2,
                            ProductId = 1,
                            Quantity = 234
                        },
                        new
                        {
                            ShopId = 3,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            ShopId = 1,
                            ProductId = 2,
                            Quantity = 2222
                        },
                        new
                        {
                            ShopId = 2,
                            ProductId = 2,
                            Quantity = 1010
                        },
                        new
                        {
                            ShopId = 3,
                            ProductId = 2,
                            Quantity = 7889
                        });
                });

            modelBuilder.Entity("SomeShop.Models.ShoppingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ShoppingSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2
                        });
                });

            modelBuilder.Entity("SomeShop.Models.CartItem", b =>
                {
                    b.HasOne("SomeShop.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.ShoppingSession", "ShoppingSession")
                        .WithMany("CartItems")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingSession");
                });

            modelBuilder.Entity("SomeShop.Models.Employee", b =>
                {
                    b.HasOne("SomeShop.Models.Shop", "Shop")
                        .WithMany("Employees")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("SomeShop.Models.Order", b =>
                {
                    b.HasOne("SomeShop.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Shop");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SomeShop.Models.OrderItem", b =>
                {
                    b.HasOne("SomeShop.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SomeShop.Models.Payment", b =>
                {
                    b.HasOne("SomeShop.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("SomeShop.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.PaymentProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.PaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Provider");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SomeShop.Models.Product", b =>
                {
                    b.HasOne("SomeShop.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("SomeShop.Models.ProductCategory", b =>
                {
                    b.HasOne("SomeShop.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SomeShop.Models.ShopStorage", b =>
                {
                    b.HasOne("SomeShop.Models.Product", "Product")
                        .WithMany("ShopStorages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Models.Shop", "Shop")
                        .WithMany("ShopStorages")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("SomeShop.Models.ShoppingSession", b =>
                {
                    b.HasOne("SomeShop.Models.Client", "Client")
                        .WithMany("Sessions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SomeShop.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SomeShop.Models.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SomeShop.Models.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SomeShop.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SomeShop.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SomeShop.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductCategories");

                    b.Navigation("ShopStorages");
                });

            modelBuilder.Entity("SomeShop.Models.Shop", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Orders");

                    b.Navigation("ShopStorages");
                });

            modelBuilder.Entity("SomeShop.Models.ShoppingSession", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
